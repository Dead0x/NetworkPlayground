package investigation;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;

import org.json.JSONArray;
import org.json.JSONObject;

import config.Settings;
import investigation.agents.Agent;
import investigation.agents.TerminalAgent;
import universal.CSVLoader;
import universal.CodeLogger;
import universal.CodeLogger.DEPTH;

public class PentestHandle
{
	public static ArrayList<Agent> agents = new ArrayList<Agent>();
	public final static String FILE_PATH = Settings.WORKING_DIR + "/src/data/pentest-agents.txt";
	public static boolean hasRun = false;
	
	public PentestHandle()
	{
		if (!hasRun)
			loadAgents();
		else
			CodeLogger.err("PentestHandle is a Singleton class, must not initialise more than once.", DEPTH.ROOT);		  
	}

	private static void loadAgents()
	{	
		CSVLoader csv = new CSVLoader(FILE_PATH).trim().saveData().skipHeader().skipChars(" /").load();
		
		for (ArrayList<String> row : csv.data)
		{
			new TerminalAgent(new Desire(row.get(0), row.get(1), row.get(2)), row.get(3));
		}
		
		CodeLogger.log("New Agents Registered (" + agents.size() + ")", DEPTH.CHILD);
	}
	
	public static void loadAgentsv2()
	{	
		String contents = "";
		try
		{
			FileReader fr = new FileReader(Settings.WORKING_DIR + "/src/data/pentest-agents-v2.json");
			Scanner s = new Scanner(fr);
			while (s.hasNextLine())
				contents += s.nextLine();
		} catch (FileNotFoundException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
				
		JSONObject jsonObject = new JSONObject(contents.trim());
		Iterator<String> keys = jsonObject.keys();

		while(keys.hasNext()) 
		{
			String key = keys.next();
			if (jsonObject.get(key) instanceof String)
			{
				System.out.println(key + " : " + jsonObject.getString(key));
			}
			else if (jsonObject.get(key) instanceof JSONArray) {
		          System.out.println(key);
		    }
		}
	}
	
	public static void testInvestigation()
	{
		TerminalAgent manual = new TerminalAgent(new Desire("Manual agent", "", ""), "");
		
		Investigation investigation = new Investigation("Find open ports of localhost", manual.getID());
		investigation.target("127.0.0.1", true);
		investigation.target("https://localhost", true);
		
		manual.queue(investigation);		
	}
}
